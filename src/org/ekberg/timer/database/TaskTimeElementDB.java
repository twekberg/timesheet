//  @(#) $Id:  $


//-----------------------------------------------------------------------------
/**
 * WARNING: DO NOT EDIT THIS FILE.
 *
 * This file is automatically generated by the GenDB program and should not be
 * modified directly. Only the .properties file should be changed.
 * Any specializations should be made to the subclass.
 *
 */
//-----------------------------------------------------------------------------


package org.ekberg.timer.database;


import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.ekberg.database.DatabaseBase;
import org.ekberg.timer.utility.Trace;


/**
 * This class maps to the TaskTimeElement table in the database. It is used to allow
 * one to manage TaskTimeElements interactively, rather than doing so by hand
 * coding.
 *<P>
 * The operations that are public are:
 * <UL>
 *   <LI> Simple constructor.
 *   <LI> get/set methods on all data items.
 *   <LI> Create this instance in the database.
 *   <LI> Static findByID to find a particular TaskTimeElement in the database.
 *   <LI> Static findAll to get all TaskTimeElement objects in the database.
 *   <LI> Static findAllByTaskDate to find all TaskTimeElement objects with the same taskDate in the database.
 *   <LI> Update the instance in the database.
 *   <LI> Static delete method to delete a particular TaskTimeElement from the
 *        database.
 *   <LI> toString.
 * </UL>
 *<P>
 */
public class TaskTimeElementDB extends DatabaseBase {
    /** Running counter to try and avoid having objects generated at the same
     * millisecond have the same ID. This gets incremented every time an object
     * is created. It wraps around when MAX_OBJECTS_PER_MILLISECOND is
     * reached. Look in DatabaseBase.java for more details. */
    private static long objectCount = 0;

    /** The millisecond time the last time it was retrieved for this object. */
    private static long lastMsTime = -1L;

    /** Used to identify the originator to the getConnection method. */
    private final static String ME = "TaskTimeElementDB";

    /** The user's login id. */
    private static String userName = null;


    //-------------------------------------------------------------------------
    /**
     * Get the millisecond time of the last object that was created. There is a
     * separate time for each database object.
     *
     * @return
     *   long - the last object millisecond time.
     */
    //-------------------------------------------------------------------------
    protected long getLastMsTime() {
        return lastMsTime;
    }


    //-------------------------------------------------------------------------
    /**
     * Update the millisecond time for a particular concete database class.
     *
     * @param  lastMsTime  the new millsecond time.
     */
    //-------------------------------------------------------------------------
    protected void setLastMsTime(long lastMsTime) {
        TaskTimeElementDB.lastMsTime = lastMsTime;
    }


    //-------------------------------------------------------------------------
    /**
     * Get the object count for a particular object type. An object ID is
     * constructed from the millisecond time and this count. Each millisecond
     * this count is reset to zero so we can see how many objects are created
     * each millsecond.
     *
     * @return
     *   long - the current object count for an object type.
     */
    //-------------------------------------------------------------------------
    protected long getObjectCount() {
        return objectCount;
    }


    //-------------------------------------------------------------------------
    /**
     * Update the object count for a particular concrete database class.
     *
     * @param  objectCount  the new object count.
     */
    //-------------------------------------------------------------------------
    protected void setObjectCount(long objectCount) {
        TaskTimeElementDB.objectCount = objectCount;
    }


    //-------------------------------------------------------------------------
    /**
     * All accesses to the database should be through this user.
     *
     * @param  userName  the user's login id.
     */
    //-------------------------------------------------------------------------
    public TaskTimeElementDB(String userName) {
        setUserName(userName);
    }


    //-------------------------------------------------------------------------
    /**
     * Simple constructor.
     */
    //-------------------------------------------------------------------------
    public TaskTimeElementDB() {
    }


    public void setUserName(String userName) {
        TaskTimeElementDB.userName = userName;
    }


    // ------------------------------------------------------------------------
    /**
     * Database create method. Inserts a new TaskTimeElement object into the
     * database. If an object with the same id already exists the
     * existing object is updated.
     *
     * @return
     *   boolean - true if the create was successful, false otherwise. If a
     * failure is detected a message will be written to the Trace file.
     */
    // ------------------------------------------------------------------------
    public boolean create(TaskTimeElement bean) {
        boolean ret = true;
        String sql = null;
        TaskTimeElement object;
        Statement theStatement = null;
        Connection theConnection = null;
        ResultSet rs = null;

        object = findByID(bean.getId());
        if (object != null) {
            if (object.getId() != bean.getId())
                bean.setId(object.getId());
            ret = TaskTimeElementDB.update(bean);
        }
        else {
            // It isn't there. Write out the new one.
            try {
                if (userName != null) {
                    bean.setUserName(userName);
                }
                theConnection = AdminConnectionManager.getConnection(ME + ".create");
                theStatement = theConnection.createStatement();
                sql = "insert into TaskTimeElement (" +
                            "DURATION" +  // 1
                            ",TASKDATE" + // 2
                            ",TASKNAME" + // 3
                            ",USERNAME" + // 4
                            ") " +
                            "values (" +
                            bean.getDuration() + // 1
                            "," + "'" + DatabaseBase.encodeToSql(bean.getTaskDate()) + "'" + // 2
                            "," + "'" + DatabaseBase.encodeToSql(bean.getTaskName()) + "'" + // 3
                            "," + "'" + DatabaseBase.encodeToSql(bean.getUserName()) + "'" + // 4
                            ")";
                theStatement.executeUpdate(sql);
                theStatement.close();
                theStatement = null;
                // Get the auto_increment primary key.
                theStatement = theConnection.createStatement();
                sql = "select last_insert_id()";
                theStatement.executeQuery(sql);
                rs = theStatement.getResultSet();
                if (rs.next()) {
                    bean.setId(rs.getLong(1));
                }
            }
            catch (SQLException e) {
                Trace.error("sql=" + sql, e);
                ret = false;
            }
            finally {
                if (rs != null) {
                    try {
                        rs.close();
                    }
                    catch (SQLException e) {}
                }
                if (theStatement != null) {
                    try {
                        theStatement.close();
                    }
                    catch (SQLException e) {}
                }
                if (theConnection != null)
                    AdminConnectionManager.releaseConnection(theConnection);
            }
        }
        return ret;
    }


    // ------------------------------------------------------------------------
    /**
     * Find a TaskTimeElement object in the database using its id.
     *
     * @param  id  the unique identifier of a potential TaskTimeElement object.
     *
     * @return
     *   TaskTimeElement - the TaskTimeElement object if one is found, null otherwise. If a
     * failure is detected a message will be written to the Trace file.
     */
    // ------------------------------------------------------------------------
    public static TaskTimeElement findByID(long id) {
        String sql = null;
        TaskTimeElement ret = null;
        Statement theStatement = null;
        Connection theConnection = null;
        ResultSet rs = null;

        try {
            theConnection = AdminConnectionManager.getConnection(ME + ".findByID");
            theStatement = theConnection.createStatement();
            sql = "select " +
                        "DURATION" + 
                        ",TASKDATE" + 
                        ",TASKNAME" + 
                        ",USERNAME" +
                        " from TaskTimeElement where id = " + id;
            rs = theStatement.executeQuery(sql);
            if (rs.next()) {
                int i = 1;
                ret = new TaskTimeElement();
                ret.setId(id);
                ret.setDuration(rs.getDouble(i++));
                ret.setTaskDate(rs.getString(i++));
                ret.setTaskName(rs.getString(i++));
                ret.setUserName(rs.getString(i++));
            }
        }
        catch (SQLException e) {
            Trace.error("sql=" + sql, e);
        }
        finally {
            if (rs != null) {
                try {
                    rs.close();
                }
                catch (SQLException e) {}
            }
            if (theStatement != null) {
                try {
                    theStatement.close();
                }
                catch (SQLException e) {}
            }
            if (theConnection != null)
                AdminConnectionManager.releaseConnection(theConnection);
        }
        return ret;
    }


    // ------------------------------------------------------------------------
    /**
     * Find a TaskTimeElement object in the database using its id.
     *
     * @param  id  the unique identifier of a potential TaskTimeElement object.
     *
     * @return
     *   TaskTimeElement - the TaskTimeElement object if one is found, null otherwise. If a
     * failure is detected a message will be written to the Trace file.
     */
    // ------------------------------------------------------------------------
    public static TaskTimeElement findByTaskNameAndTaskDate(String taskName, String taskDate) {
        String sql = null;
        TaskTimeElement object = null;
        Statement theStatement = null;
        Connection theConnection = null;
        ResultSet rs = null;

        try {
            theConnection = AdminConnectionManager.getConnection(ME + ".findByTaskNameAndTaskDate");
            theStatement = theConnection.createStatement();
            sql = "select " +
                        "ID" +
                        ",DURATION" + 
                        ",ENABLED" +
                        " from TaskTimeElement" +
                        " where taskName = " + "'" + DatabaseBase.encodeToSql(taskName) + "'" +
                        " and taskDate = "   + "'" + DatabaseBase.encodeToSql(taskDate) + "'" +
                        (userName == null
                                    ? ""
                                    : (" and USERNAME='" + DatabaseBase.encodeToSql(userName) + "'"));
            rs = theStatement.executeQuery(sql);
            if (rs.next()) {
                object = new TaskTimeElement();
                object.setTaskDate(taskDate);
                object.setTaskName(taskName);
                if (userName != null) {
                    object.setUserName(userName);
                }
                int i = 1;
                object.setId(rs.getLong(i++));
                object.setDuration(rs.getDouble(i++));
                object.setEnabled(rs.getBoolean(i++));
            }
        }
        catch (SQLException e) {
            Trace.error("sql=" + sql, e);
        }
        finally {
            if (rs != null) {
                try {
                    rs.close();
                }
                catch (SQLException e) {}
            }
            if (theStatement != null) {
                try {
                    theStatement.close();
                }
                catch (SQLException e) {}
            }
            if (theConnection != null)
                AdminConnectionManager.releaseConnection(theConnection);
        }
        return object;
    }


    // ------------------------------------------------------------------------
    /**
     * Find all TaskTimeElement objects in the database. If a userName has been
     * specified then only TaskTimeElement object for that userName are
     * returned.
     *
     * @return
     *   List<TaskTimeElement> - all of the TaskTimeElement objects. If no
     * TaskTimeElement objects are found an empty List will be returned. If a
     * failure is detected null will be returned and a message will be written
     * to the Trace file.
     */
    // ------------------------------------------------------------------------
    public static List<TaskTimeElement> findAll() {
        List<TaskTimeElement> ret = new ArrayList<TaskTimeElement>();
        String sql = null;
        Statement theStatement = null;
        Connection theConnection = null;
        ResultSet rs = null;

        try {
            theConnection = AdminConnectionManager.getConnection(ME + ".findAll");
            theStatement = theConnection.createStatement();
            sql = "SELECT ID" +
                        ",DURATION" + 
                        ",TASKDATE" + 
                        ",TASKNAME" + 
                        ",USERNAME" +
                        " FROM TASKTIMEELEMENT" +
                        " WHERE ENABLED IS TRUE" +
                        (userName == null
                                    ? ""
                                    : (" AND USERNAME='" + DatabaseBase.encodeToSql(userName) + "'")) +
                        " ORDER BY TASKDATE,TASKNAME";
            rs = theStatement.executeQuery(sql);
            TaskTimeElement object;
            while(rs.next()) {
                object = new TaskTimeElement();
                int i = 1;
                object.setId(rs.getLong(i++));
                object.setDuration(rs.getDouble(i++));
                object.setTaskDate(rs.getString(i++));
                object.setTaskName(rs.getString(i++));
                object.setUserName(rs.getString(i++));
                object.setEnabled(true);
                ret.add(object);
            }
        }
        catch (SQLException e) {
            Trace.error("sql=" + sql, e);
            ret = null;
        }
        catch (Exception ex) {
            Trace.error("Exception", ex);
            ret = null;
        }
        finally {
            if (rs != null) {
                try {
                    rs.close();
                }
                catch (SQLException e) {}
            }
            if (theStatement != null) {
                try {
                    theStatement.close();
                }
                catch (SQLException e) {}
            }
            if (theConnection != null)
                AdminConnectionManager.releaseConnection(theConnection);
        }
        return ret;
    }


    //-------------------------------------------------------------------------
    /**
     * Retrieve a List of TaskTimeElement objects based on taskDate.
     *
     * @param  taskDate  taskDate of objects to retrieve.
     *
     * @return
     *   List<TaskTimeElement> - TaskTimeElement objects associated with a
     * taskDate.
     */
    //-------------------------------------------------------------------------
    public static List<TaskTimeElement> findAllByTaskDate(String taskDate) {
        String sql = null;
        List<TaskTimeElement> ret = new ArrayList<TaskTimeElement>();
        Statement theStatement = null;
        Connection theConnection = null;
        ResultSet rs = null;

        try {
            theConnection = AdminConnectionManager.getConnection(ME + ".findAllByTaskDate");
            theStatement = theConnection.createStatement();
            sql = "SELECT " +
                    "ID" +
                    ",DURATION" +
                    ",TASKNAME" +
                    ",USERNAME" +
                    " FROM TaskTimeElement" +
                        " WHERE TASKDATE=" + 
                        "'" + DatabaseBase.encodeToSql(taskDate) + "'" +
                        " AND ENABLED IS TRUE" +
                        (userName == null
                                    ? ""
                                    : (" AND USERNAME='" + DatabaseBase.encodeToSql(userName) + "'")) +
                        " ORDER BY TASKNAME";
            rs = theStatement.executeQuery(sql);
            TaskTimeElement object = null;
            while (rs.next()) {
                object = new TaskTimeElement();
                object.setTaskDate(taskDate);
                object.setEnabled(true);
                int i = 1;
                object.setId(rs.getLong(i++));
                object.setDuration(rs.getDouble(i++));
                object.setTaskName(rs.getString(i++));
                object.setUserName(rs.getString(i++));
                ret.add(object);
            }
        } catch (SQLException sqle) {
            Trace.error("sql = " + sql, sqle);
        }
        finally {
            if (rs != null) {
                try {
                    rs.close();
                }
                catch (SQLException e) {}
            }
            if (theStatement != null) {
                try {
                    theStatement.close();
                }
                catch (SQLException e) {}
            }
            if (theConnection != null)
                AdminConnectionManager.releaseConnection(theConnection);
        }
        return ret;
    }


    // ------------------------------------------------------------------------
    /**
     * Database update method. Modifies all attributes of an existing TaskTimeElement
     * object.
     *
     * @return
     *   boolean - true if the update was successful, false otherwise. If a
     * failure is detected a message will be written to the Trace file.
     */
    // ------------------------------------------------------------------------
    public static boolean update(TaskTimeElement bean) {
        boolean ret = false;
        String sql = null;
        Statement theStatement = null;
        Connection theConnection = null;

        try {
            theConnection = AdminConnectionManager.getConnection(ME + ".update");
            theStatement = theConnection.createStatement();
            sql = "update TaskTimeElement set " +
                        "DURATION=" + bean.getDuration() +
                        ",TASKDATE=" + "'" + DatabaseBase.encodeToSql(bean.getTaskDate()) + "'" +
                        ",TASKNAME=" + "'" + DatabaseBase.encodeToSql(bean.getTaskName()) + "'" +
                        ",USERNAME=" + "'" + DatabaseBase.encodeToSql(bean.getUserName()) + "'" +
                        ",ENABLED=" + bean.isEnabled() +
                        " where ID = " + bean.getId();
            int rowCount = theStatement.executeUpdate(sql);
            ret = rowCount >= 1;
        }
        catch (SQLException e) {
            Trace.error("sql=" + sql, e);
            ret = false;
        }
        finally {
            if (theStatement != null) {
                try {
                    theStatement.close();
                }
                catch (SQLException e) {}
            }
            if (theConnection != null)
                AdminConnectionManager.releaseConnection(theConnection);
        }
        return ret;
    }


    // ------------------------------------------------------------------------
    /**
     * Database delete method. Removes an existing TaskTimeElement object from the
     * database.
     *
     * @param  id  identifies a particular TaskTimeElement object.
     *
     * @return
     *   boolean - true if the delete was successful, false otherwise. If a
     * failure is detected a message will be written to the Trace file.
     */
    // ------------------------------------------------------------------------
    public static boolean delete(long id) {
        String sql = null;
        boolean ret = false;
        Statement theStatement = null;
        Connection theConnection = null;

        try {
            theConnection = AdminConnectionManager.getConnection(ME + ".delete");
            theStatement = theConnection.createStatement();
            sql = "delete from TaskTimeElement where " +
                        "ID = " + id;
            theStatement.executeUpdate(sql);
            ret = true;
        }
        catch (SQLException e) {
            Trace.error("sql=" + sql, e);
        }
        finally {
            if (theStatement != null) {
                try {
                    theStatement.close();
                }
                catch (SQLException e) {}
            }
            if (theConnection != null)
                AdminConnectionManager.releaseConnection(theConnection);
        }
        return ret;
    }


}
